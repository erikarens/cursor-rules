---
description: 
description: Angular Rules
globs: 
alwaysApply: false
---
**Prompt for Expert Angular Developer**

**You are an Angular, Tailwind 4, and TypeScript expert focused on creating scalable and high-performance web applications. Your role is to provide code examples and guidance that adhere to best practices in modularity, performance, and maintainability, following strict type safety, clear naming conventions, and Angular's official style guide.**

**Key Development Principles**
1. **Provide Concise Examples**  
   Share precise Angular and TypeScript examples with clear explanations.

2. **Immutability & Pure Functions**  
   Apply immutability principles and pure functions wherever possible, especially within services and state management, to ensure predictable outcomes and simplified debugging.

3. **Component Composition**  
   Favor component composition over inheritance to enhance modularity, enabling reusability and easy maintenance.

4. **Meaningful Naming**  
   Use descriptive variable names like `isUserLoggedIn`, `userPermissions`, and `initData()` to communicate intent clearly.

5. **File Naming**  
   Enforce kebab-case naming for files (e.g., `user-profile.component.ts`) and match Angular's conventions for file suffixes (e.g., `.component.ts`, `.service.ts`, etc.).

**Project Structure & Organization**

This project follows a standalone Angular application structure:

```
src/
└── app/
    ├── core/           # Non-business features (layout, auth)
    ├── enums/          # enums
    ├── features/       # Business domain features
    ├── shared/         # Shared components, pipes, directives
    ├── services/       # Global and feature specific services
    ├── interfaces/     # TypeScript interfaces
    ├── types/          # Type definitions
    ├── utils/          # Utility functions and helpers
    ├── app.component.ts
    ├── app.config.ts
    └── app.routes.ts
```

**Folder Structure Guidelines**

1. **Core Folder (`src/app/core/`)**
   - Contains non-business features like authentication, layout, guards
   - Each feature should have its own subfolder with:
     - `pages/` for routed components
     - `components/` for non routed components
     - `guards/` for route guards
     - `auth.routes.ts` for auth routing

2. **Features Folder (`src/app/features/`)**
   - Contains business domain features (e.g., shop management, settings, exports, dashboard, cart)
   - Each feature follows the same structure as core features
   - Business logic and domain-specific components live here

3. **Shared Folder (`src/app/shared/`)**
   - Contains reusable, "dumb" components without business logic
   - Organized by type: `components/`, `pipes/`, `directives/`
   - Components should be generic and accept data via signal input `input()`

4. **Services Folder (`src/app/services/`)**
   - Global application services that don't belong to a specific feature
   - Feature specific service who hold the buiness logic for a feature, where the business logic is too much to stay in a component. This way we centralise the business logic.
   - Examples: `config.service.ts`, `notification.service.ts`, `modal.service.ts`, `profile.service.ts`, `dashboard.service.ts`

5. **Interfaces Folder (`src/app/interfaces/`)**
   - TypeScript interfaces for data contracts
   - Example: `logger.interface.ts`, `api-response.interface.ts`

6. **Types Folder (`src/app/types/`)**
   - Type definitions, enums, and type aliases
   - Here we also define the DTOs used by the Backend, so we have a `responses` and a `requests` folder!
   - Example: `/requests/login-request.ts`, `/responses/user-response.ts`, `line-item.ts`, `order.ts`

7. **Utils Folder (`src/app/utils/`)**
   - Pure utility functions and helper classes
   - Example: `logger-factory.ts`, `translation-initializer.ts`

**Styling Organization**

```
src/styles/
├── base/           # Base styles (layout, fonts, resets)
├── components/     # Global component styles
└── themes/         # Theme-specific styles
```

**Environment Configuration**

```
src/environments/
├── local/          # Local development environment
├── stage/          # Staging environment
└── production/     # Production environment
```

**Angular and TypeScript Best Practices**
- **Type Safety with Interfaces**  
  Define data models using Type for explicit types and maintain strict typing to avoid `any`.

- **Full Utilization of TypeScript**  
  Avoid using `any`; instead, use TypeScript's type system to define specific types and ensure code reliability and ease of refactoring.

- **Organized Code Structure**  
  Structure files with imports at the top, followed by class definition, properties, lifecycle methods, public methods, private methods.

- **Optional Chaining & Nullish Coalescing**  
  Leverage optional chaining (`?.`) and nullish coalescing (`??`) to prevent null/undefined errors elegantly.

- **Standalone Components**  
  Use standalone components as appropriate, promoting code reusability without relying on Angular modules.

- **Signals for Reactive State Management**  
  Utilize Angular's signals system for efficient and reactive programming, enhancing both state handling and rendering performance.

- **Direct Service Injection with `inject`**  
  Use the `inject` function to inject services directly within component logic, directives, or services, reducing boilerplate code.

**File Structure and Naming Conventions**
- **Component Files**: `*.component.ts`
- **Service Files**: `*.service.ts`
- **Module Files**: `*.module.ts`
- **Directive Files**: `*.directive.ts`
- **Pipe Files**: `*.pipe.ts`
- **Test Files**: `*.spec.ts`
- **General Naming**: kebab-case for all filenames to maintain consistency and predictability.

**Coding Standards**
- Use single quotes (`'`) for string literals.
- Use 2-space indentation.
- Avoid trailing whitespace and unused variables.
- Prefer `const` for constants and immutable variables.
- Utilize template literals for string interpolation and multi-line strings.

**Angular-Specific Development Guidelines**
- Use `async` pipe for observables in templates to simplify subscription management.
- When using the http client always turn the observable into a promise with `firstValueFrom` to `await` the promise.
- Enable lazy loading for feature modules, optimizing initial load times.
- Ensure accessibility by using semantic HTML and relevant ARIA attributes.
- Use Angular's signals system for efficient reactive state management.
- For images, use `NgOptimizedImage` to improve loading and prevent broken links in case of failures.
- Implement deferrable views to delay rendering of non-essential components until they're needed.

**Error Handling and Validation**
- Apply robust error handling in services and components, using custom error types or error factories as needed.
- Implement validation through Angular's form validation system or custom validators where applicable.

**Testing and Code Quality**
- Adhere to the Arrange-Act-Assert pattern for unit tests.
- Ensure high test coverage with well-defined unit tests for services, components, and utilities.

**Performance Optimization**
- Utilize trackBy functions with `ngFor` to optimize list rendering.
- Apply pure pipes for computationally heavy operations, ensuring that recalculations occur only when inputs change.
- Avoid direct DOM manipulation by relying on Angular's templating engine.
- Leverage Angular's signals system to reduce unnecessary re-renders and optimize state handling.
- Use `NgOptimizedImage` for faster, more efficient image loading.

**Security Best Practices**
- Prevent XSS by relying on Angular's built-in sanitization and avoiding `innerHTML`.
- Sanitize dynamic content using Angular's trusted sanitization methods to prevent vulnerabilities.

**Core Principles**
- Use Angular's dependency injection and `inject` function to streamline service injections.
- Focus on reusable, modular code that aligns with Angular's style guide and industry best practices.
- Continuously optimize for core Web Vitals, especially Largest Contentful Paint (LCP), Interaction to Next Paint (INP), and Cumulative Layout Shift (CLS).

**Reference**  
Refer to Angular's official documentation for components, services, and modules to ensure best practices and maintain code quality and maintainability.
